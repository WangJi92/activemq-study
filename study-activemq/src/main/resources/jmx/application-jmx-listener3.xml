<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

 <!--   在 ActiveMQ4中，支持ActiveMQ以同步或异步模式向消费者分派消息。这样的意义：
    可以以异步模式向处理消息慢的消费者分配消息；以同步模式向处理消息快的消费者分配消息。
    ActiveMQ默认以同步模式分派消息，这样的设置可以提高性能。但是对于处理消息慢的消费者，需要以异步模式分派。-->

    <!-- 配置connectionFactory -->
    <bean id="jmsFactory" class="org.apache.activemq.pool.PooledConnectionFactory" destroy-method="stop">
        <property name="connectionFactory">
            <bean class="org.apache.activemq.ActiveMQConnectionFactory">
                <property name="brokerURL" value="tcp://127.0.0.1:61616"></property>
                <property name="userName" value="admin"></property>
                <property name="password" value="admin"></property>
                <property name="sendAcksAsync" value="true"></property><!--(异步发送)-->
                <property name="dispatchAsync" value="true"></property><!--异步分派-->
                <!--http://blog.csdn.net/luxianping/article/details/50901833 重传配置-->
                <property name="redeliveryPolicy"><!--重传策略-->
                    <bean class="org.apache.activemq.RedeliveryPolicy">
                        <property name="maximumRedeliveries" value="8"></property><!--重传次数-->
                        <property name="initialRedeliveryDelay" value="10000"></property><!--重传延迟-->
                        <property name="maximumRedeliveryDelay" value="10000000"></property><!--最大传送延迟-->
                        <property name="backOffMultiplier" value="5"></property><!--递增倍数-->
                        <property name="useExponentialBackOff" value="true"></property><!--启动递增倍数-->
                    </bean>
                </property>
            </bean>
        </property>
        <property name="maxConnections" value="100"></property>
    </bean>

    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="jmsFactory"></property>
        <!--默认目的地的名称-->
        <property name="defaultDestinationName" value="subject" />
        <!-- 区别它采用的模式为false是点对点，为true是订阅 -->
        <!--<property name="pubSubDomain" value="true" />-->
        <property name="messageConverter" ref="simpleMessageConverter"></property><!--使用convetandSend-->
    </bean>
    <bean id="destination" class="org.apache.activemq.command.ActiveMQQueue">
        <!-- 设置消息队列的名字 -->
        <constructor-arg index="0" value="subject" />
    </bean>
 <!--   http://elim.iteye.com/blog/1893038-->
<!--    在ActiveMQ中实现了两种类型的Destination，一个是点对点的ActiveMQQueue，另一个就是支持订阅/发布模式的ActiveMQTopic-->

    <bean id="wangjiqueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg index="0" value="wangji"></constructor-arg>
    </bean>

    <!-- 消息监听适配器 -->
    <bean id="messageListenerAdapter" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
        <property name="delegate">
            <bean class="activemqspring.SpringReceiverAdapterLinstener"/>
        </property>
        <property name="defaultListenerMethod" value="receiveMessage"/>
    </bean>
    <bean id="simpleMessageConverter" class="org.springframework.jms.support.converter.SimpleMessageConverter"></bean>
    <bean id="messageListenerAdapterContainer"
          class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="jmsFactory" />
        <property name="destination" ref="destination" />
        <property name="messageListener" ref="messageListenerAdapter" />
        <property name="messageConverter" ref="simpleMessageConverter"></property><!--(默认的消息转换器)-->
       <!-- <property name="messageSelector" ref=""></property>--><!--消息选择器可以用来区分不同的消息-->
      <!--  http://blog.csdn.net/helongzhong/article/details/63253392
        http://www.cnblogs.com/wangjian1990/p/6689703.html-->
    <!--    sessionAcknowledgeMode: ACK MODE,默认为AUTO。spring-jms做了一件非常遗憾的事情，
        如果指定了sessionTransacted为true，那么在调用listener.onMessage()方法之后，则会立即提交事务(session.commit())
        ，即使开发者使用了sessionAwareMessageListener，所以开发者无法实现基于事务的“批量”确认机制。
        如果开发者指定为CLIENT_ACK，那么spring-JMS将会在onMessage方法返回后立即调用message.acknowlege()方法，
        所以开发者自己是否确认以及何时确认，将没有意义，如果不希望spring来确认消息，只能在onMessage方法中通过抛出异常的方式。
        其中“1”表示AUTO_ACKNOWLEDGE,“2”为CLIENT_ACKNOWLEDGE = 2，“3”为 DUPS_OK_ACKNOWLEDGE = 3。-->
  <!--
        持久订阅时，客户端向ActiveMQ注册一个识别自己身份的ID，当这个客户端处于离线时，ActiveMQ会为这个ID保存所有发送到主题的消息
        ，当客户端再次连接到ActiveMQ时，
        会根据自己的ID得到所有当自己处于离线时发送到主题的消息。持久订阅会增加开销，同一时间在持久订阅中只有一个激活的用户
        clientId: 对于Topic订阅者而言，此参数必备。
        subscriptionDurable: 是否为“耐久性”订阅者。在pubSubDomain为true时有效。默认为false。
        durableSubscriptionName: 耐久订阅者名称，每个clientId下可以有多个耐久订阅者，但是他们必须有不同的名字。默认为className。-->
      <!--  http://blog.csdn.net/qh_java/article/details/61932295   很详细-->

<!--        http://blog.csdn.net/xiaxiaorui2003/article/details/53395257  异步发送提高了速度-->

    </bean>
</beans>